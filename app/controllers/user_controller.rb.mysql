#encoding: utf-8
class UserController < ApplicationController
  require 'omniauth-facebook'
  require 'omniauth-twitter'
  require 'omniauth'
  before_filter :authorize, :only => [:update, :update_password, :update_sns, :update_notification, :update_category, :ticket]

  protected
  def authorize
    user = nil
    user = session[:user_id] if session[:user_id]
		#@user = User.find(:all, :conditions => ['userid = :userid AND acct_auth > 0', {:userid => user}]).last
    @user = Member.where(:userid => user, :acct_auth.gt => 0).first
    if @user
    else
      flash[:notice] = "로그인 해주시기 바랍니다."
      redirect_to "/signin"
    end
  end

  public

  def show
    if params[:userid]
      @user = Member.info(params[:userid])
    elsif session[:user]		
      @user = session[:user]
    end

    if @user and @user.userid
      @user
      @meet_participated = @user.meet_participated
      #@meet_hosted = @user.meet_hosted
      #@meet_hooed = @user.meet_hooed
    else
      flash[:notice] = "회원이 없습니다."
      redirect_to "/home"
    end
  end

  def index
  	if session[:user]
      redirect_to :controller=>'home', :action=>'index'
  	else
		if params[:userid] and params[:password]
  			user = User.signin(params[:userid],params[:password])
  			if user and request.post?
				session[:user] = user
				session[:user_id] = user.userid
				#Notification.send("email", session[:user_id], "")
				#User.update_screen_name(session[:user_id])
				flash[:notice] = "#{user.name}님, 환영합니다~"
				redirect_to "/home"
	  		else
				flash[:notice] = "로그인에 실패하였습니다."
				redirect_to "/signin"
			end
		end
    end
  end

  def signin
    auth = request.env["omniauth.auth"]
    @user_data = Hash.new
	@tmp = true
	if (@user_data = User.find_by_fuid(auth["uid"])) == nil
		@user_data = User.find_by_tuid(auth["uid"])
	end
  	user = User.signin_with_provider(params[:provider], auth["uid"])
  	@tmp = false if @user_data != nil
	if session[:user]
		user = User.find(:all, :conditions => ['userid = :userid AND acct_auth > 0', {:userid => session[:user].userid}]).last
		if auth[:provider] == 'facebook' && (user.fuid == nil || user.fuid == "") && @tmp
			user.fuid = user.uid =  auth["uid"]
			if user.provider == 'hooful'
				user.provider = session[:provider] = 'facebook'
			end
			user.fbauth = auth["credentials"]["token"]
			#user.userpic = 'facebook'
			user.save
			session[:user] = user
      session[:user_id] = user.userid
			#Log collect
			#LogSnsauth.savelog(session[:user_id],auth[:provider],1)
			
			flash[:notice] = "Facebook 계정이 연결되었습니다."
			redirect_to '/user/edit/sns'
		elsif auth[:provider] == 'twitter' && (user.tuid == nil || user.tuid == "") && @tmp
			user.tuid = user.uid =  auth["uid"]
			# 여기
			if user.provider == 'hooful'
				user.provider = session[:provider] = 'twitter'
			end
			user.tauth = auth['credentials']['token']
			user.tsecret = auth['credentials']['secret']
			#user.userpic = 'twitter'
			user.save
			session[:user] = user	
      session[:user_id] = user.userid			
			#Log collect
			#LogSnsauth.savelog(session[:user_id],auth[:provider],1)
			
			flash[:notice] = "Twitter 계정이 연결되었습니다."
			redirect_to '/user/edit/sns'
		elsif auth["uid"].to_s == user.fuid.to_s || auth["uid"].to_s == user.tuid.to_s
		# sns token restore
			if auth["uid"].to_s == user.fuid.to_s
				user.fbauth = auth["credentials"]["token"]
			elsif auth["uid"].to_s == user.tuid.to_s
				user.tauth = auth['credentials']['token']
				user.tsecret = auth['credentials']['secret']
			end
			user.save
			session[:user] = user
      session[:user_id] = user.userid
			#Log collect
			#LogSnsauth.savelog(session[:user_id],auth[:provider],1)
			

			flash[:notice] = "SNS 계정이 재인증되었습니다."
			redirect_to "/home"
				
		else
			flash[:notice] = "SNS 계정을 확인해 주세요."
			redirect_to '/user/edit/sns'
		end
	else
		if user
			session[:user] = user
      session[:user_id] = user.userid
			#Notification.send("email", session[:user_id], "")
			#User.update_screen_name(session[:user_id])
			flash[:notice] = "#{user.name}님, 환영합니다~"
			redirect_to "/home"
		else
			if @user_data
				user = @user_data
			else
				user = Hash.new
				@check = true
				if auth["provider"] == 'facebook'
					@tmpuser = User.find_by_userid(auth["info"]["email"])
					if @tmpuser[:userid]
						flash[:notice] = "이미 가입된 이메일입니다."
						@check = false
					else
						user = {:provider => auth["provider"], :uid => auth["uid"], :name => auth["info"]["name"], :userid => auth["info"]["email"], :password => '', :userpic => '', :fuid => auth["uid"], :tuid => nil,:fbauth => auth["credentials"]["token"], :local => nil, :gender => auth["extra"]["raw_info"]["gender"]}
					end
				elsif auth["provider"] == 'twitter'
					user = {:provider => auth["provider"], :uid => auth["uid"], :name => auth["info"]["name"], :userid => '', :password => '', :userpic => '', :fuid => nil, :tuid => auth["uid"], :tauth => auth['credentials']['token'],:tsecret => auth['credentials']['secret'], :local => nil, :tid => auth["info"]["nickname"]}
					#:local => auth["info"]["location"], 
				end
				flash[:userdata] = user
				if @check
					redirect_to "/signup"
				else
					redirect_to "/signin"
				end
			end
		end
	end
  end
  def signout
    session[:user] = nil
    session[:user_id] = nil
    flash[:notice] = "로그아웃 되었습니다."
	redirect_to "/home"
  end
  def create
	@userinfo = Hash.new
	if flash[:userdata]
		@userinfo = flash[:userdata]
	end
  end
  def createuser
    @user = User.create_user(params)
    if @user.save
		#Log collect
	    #LogBehavior.savelog(@user)
		#LogSnsauth.savelog(@user.userid,@user.provider,1) unless @user.provider=="hooful"

  		session[:user] = @user
      session[:user_id] = @user.userid
  		session[:provider] = @user.provider
  		session[:userpic] = @user.userpic	
		  User.update_screen_name(@user.userid)
  		
  		#encaped = Home.getEncapedCode('varification',@user.userid,@user.created_at)
  		#url = 'https://www.hooful.com/act/email_auth?code=' + encaped									
  		#UserMailer.welcome_email(@user, url)#.deliver
  		
  		#flash[:notice] = "#{@user.name}님, 가입을 환영합니다.<br/>가입하신 e-mail 수신함에서 인증메일을 확인해 주시기 바랍니다."
  		redirect_to '/category'
  	else
  		File.delete("#{RAILS_ROOT}/public/userpic/"+@user.userpicname)  if File.exist?("#{RAILS_ROOT}/public/userpic/"+@user.userpicname)
  		flash[:notice] = "가입에 실패하였습니다. 다시 시도해주시기 바랍니다."
  		redirect_to '/signup'
  	end
  end

  def update
    if session[:user]		
		@user = session[:user]
		picdata = User.getProfilePictureset(@user.userid)
		@userpic = ""
		@userpic << "<span class=\"facebook\" for=\"facebook\" addr=\"#{picdata[:facebook]}\">f</span>" if picdata[:facebook]
		@userpic << "<span class=\"twitter\" for=\"twitter\" addr=\"#{picdata[:twitter]}\">t</span>" if picdata[:twitter]
		##@userpic << "<span class=\"btn new\" addr=\"new\"><i class=\"icon-pencil\"></i></span>"
		#@userpic << "<span class=\"btn hooful\" for=\"hooful\" addr=\"http://d3o755op057jl1.cloudfront.net/hooful/edit_image.png\"><i class=\"icon-remove\"></i></span>"
		
	end
  end

  def update_password
    if session[:user_id]		
      @user = User.info(session[:user_id])
    end
  end

  def update_sns
    if session[:user_id]		
      @user = User.info(session[:user_id])
    end
  end

  def update_notification
    if session[:user_id]		
      @user = User.info(session[:user_id])
      @notify = ActiveSupport::JSON.decode(@user.noti)
    end
  end

  def update_category
    if session[:user_id]		
      @user = User.info(session[:user_id])
      @category = (@user.category == nil) ? '{"paragliding":"0","skydiving":"0","firing":"0","rockclimbing":"0","bungeejump":"0","waterskis":"0","jetskis":"0","kayak":"0","scubadiving":"0","camping":"0"}' : @user.category
      @uCate = ActiveSupport::JSON.decode(@category)
      @category_intro_icon = Interest.getIconUser(@uCate)
    end
  end

  def ticket
    @user = User.info(session[:user_id])
    @ticket = TicketSold.listTicket(session[:user_id])
  end

  def update_info
    @user = User.info(params[:userid])
    case params[:updateType]
      when "info"
        case params[:userpicCopy]
          when "/userpic/noimage.png"
            @user.userpic = "hooful"
          when "hooful"
            @user.userpic = "hooful"
          when "twitter"
            @user.userpic = "twitter"
          when "facebook"
            @user.userpic = "facebook"
        end
        
        case @user.userpic
          when "hooful"
            @user[:picture] = "#{S3ADDR}hooful/edit_image.png"
          when "twitter"
            @user[:picture] = "https://api.twitter.com/1/users/profile_image/"+@user.tuid.to_s+"?size=original"
          when "facebook"
            @user[:picture] = "https://graph.facebook.com/"+@user.fuid.to_s+"/picture?type=large&return_ssl_resources=1"
          else
            if Home.awsFileCheck(@user.userpic.to_s, 'userpic', 'thumb')
              @user[:picture] = S3ADDR + "userpic/thumb/#{@userinfo.userpic}"
            elsif Home.awsFileCheck(@user.userpic.to_s, 'userpic', '')
              @user[:picture] = S3ADDR + "userpic/#{@userinfo.userpic}"
            else
              @user[:picture] = S3ADDR + "userpic/noimage.png"
            end
        end
        @user.name = params[:name] if params[:name]
        @user.local = params[:local] if params[:local]
        @user.phone = params[:phone] if params[:phone]
        @user.coverpic = params[:mPicturename] if params[:mPicturename]
        @user.comment = params[:comment] if params[:comment]
        @user.save
        session[:user_id] = @user.userid
        redirect_to '/user/edit'
      when "password"
        if @user.password != Digest::SHA2.hexdigest(params[:old_password])
          redirect_to '/user/edit/password'
        else
          @user.password = Digest::SHA2.hexdigest(params[:password])
          @user.save
          session[:user_id] = @user.userid
          redirect_to '/user/edit/password'
        end
      when "sns"
        redirect_to '/user/edit/sns'
      when "notification"
        result = '{"partice_host":' + ((params[:partice_host].nil?) ? 'false' : 'true') + ','
        result << '"partice_participants":' + ((params[:partice_participants].nil?) ? 'false' : 'true') + ','
        result << '"hoo_host":' + ((params[:hoo_host].nil?) ? 'false' : 'true') + ','
        result << '"hoo_participants":' + ((params[:hoo_participants].nil?) ? 'false' : 'true') + ','
        result << '"hootalk_host":' + ((params[:hootalk_host].nil?) ? 'false' : 'true') + ','
        result << '"hootalk_participants":' + ((params[:hootalk_participants].nil?) ? 'false' : 'true') + ','
        result << '"nday_host":' + ((params[:nday_host].nil?) ? 'false' : 'true') + ','
        result << '"nday_participants":' + ((params[:nday_participants].nil?) ? 'false' : 'true') + ','
        result << '"dday_host":' + ((params[:dday_host].nil?) ? 'false' : 'true') + ','
        result << '"dday_participants":' + ((params[:dday_participants].nil?) ? 'false' : 'true') + '}'
        @user.noti = result
        @user.save
        session[:user_id] = @user.userid
        redirect_to '/user/edit/notification'
    end
  end

  def reset_password
    if params[:userid] and request.post?
  		user = User.find_valid_user(params[:userid],"","reset_password")
  		if user[:valid]
  			encaped = Home.getEncapedCode('pwdchange',user.userid,user.created_at)
  			url = 'https://www.hooful.com/user/change_password?code=' + encaped	
  			UserMailer.change_password(user, url)#.deliver
  		end
  		flash[:notice] = user[:notice]
  		redirect_to "/signin"
  	end
  end

  def change_password
    if params[:code]
      @encaped = Home.checkEncapeCode(params[:code],'pwdchange')
    elsif params[:password] and request.post?
      user = User.find_valid_user(params[:encap_userid],params[:password],"change_password")
      flash[:notice] = user[:notice]
      redirect_to user[:redirect]
      #redirect_to :controller => "users", :action => "signin"
    else
      flash[:notice] = "잘못된 접근입니다."
      redirect_to :controller=>'home', :action=>'dindex'
    end
  end

end
